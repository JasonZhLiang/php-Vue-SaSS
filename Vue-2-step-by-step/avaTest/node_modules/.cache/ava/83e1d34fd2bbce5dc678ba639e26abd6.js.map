{"version":3,"sources":["notification.js"],"names":["vm","test","beforeEach","t","N","Vue","extend","Notification","propsData","message","$mount","n","console","log","$el","textContent","innerHTML","is"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;;;AAA+C;;;AAFb;AAKlC,IAAIA,EAAJ,C,CANA;;;AAQAC,cAAKC,UAAL,CAAgBC,KAAG;AACf,QAAIC,IAAIC,cAAIC,MAAJ,CAAWC,sBAAX,CAAR;AACAP,SAAK,IAAII,CAAJ,CAAM,EAACI,WAAU;AAClBC,qBAAQ;AADU,SAAX,EAAN,EAEDC,MAFC,EAAL;AAGH,CALD;;AAQA,mBAAK,+BAAL,EAAsCP,KAAG;AACrC;AACA,QAAIE,aAAJ,CAAQE,sBAAR,EAAsBG,MAAtB;AACA,QAAIC,IAAI,IAAIN,aAAJ,CAAQE,sBAAR,EAAsBG,MAAtB,EAAR;AACAE,YAAQC,GAAR,CAAYF,EAAEG,GAAF,CAAMC,WAAlB;AACAH,YAAQC,GAAR,CAAYF,EAAEG,GAAF,CAAME,SAAlB;;AAEA;;AAEA,QAAIZ,IAAIC,cAAIC,MAAJ,CAAWC,sBAAX,CAAR;AACA,QAAIP,KAAK,IAAII,CAAJ,CAAM,EAACI,WAAU;AACtBC,qBAAQ;AADc,SAAX,EAAN,EAELC,MAFK,EAAT,CAVqC,CAYxB;;AAEbP,MAAEc,EAAF,CAAKjB,GAAGc,GAAH,CAAOC,WAAZ,EAAwB,QAAxB;AACH,CAfD;AAgBA;AACA;AACA;;;AAGA,mBAAK,iCAAL,EAAwCZ,KAAI;AACxC,QAAIC,IAAIC,cAAIC,MAAJ,CAAWC,sBAAX,CAAR;AACA,QAAIP,KAAK,IAAII,CAAJ,CAAM,EAACI,WAAU;AACtBC,qBAAQ;AADc,SAAX,EAAN,EAELC,MAFK,EAAT;;AAIAP,MAAEc,EAAF,CAAKjB,GAAGc,GAAH,CAAOC,WAAZ,EAAwB,QAAxB;AACH,CAPD;;AASA,mBAAK,mCAAL,EAA0CZ,KAAI;AAC1C;AACA;AACA;AACA;;AAEAA,MAAEc,EAAF,CAAKjB,GAAGc,GAAH,CAAOC,WAAZ,EAAwB,cAAxB;AACH,CAPD","file":"notification.js","sourcesContent":["// import Vue from 'vue';//this is using the runtime-only build of Vue where the template compiler is not available\r\nimport Vue from 'vue/dist/vue.js';//so we just reference the standalone build file, make sure don't do this in production\r\nimport test from 'ava';\r\nimport Notification from '../src/Notification';//since ava allow to use es2015 syntax but not allow to apply any other source file imported, so we need install babel-register plugin, then need babel preset plugin\r\n\r\n\r\nlet vm;\r\n\r\ntest.beforeEach(t=>{\r\n    let N = Vue.extend(Notification);\r\n    vm = new N({propsData:{\r\n        message:'foobar'\r\n    }}).$mount();\r\n});\r\n\r\n\r\ntest('that it render a notification', t=>{\r\n    // t.is(Notification.data().message,'Hello World');\r\n    new Vue(Notification).$mount();\r\n    let n = new Vue(Notification).$mount();\r\n    console.log(n.$el.textContent);\r\n    console.log(n.$el.innerHTML);\r\n\r\n    // t.is(n.$el.textContent,'Foobar');\r\n\r\n    let N = Vue.extend(Notification);\r\n    let vm = new N({propsData:{\r\n        message:'Foobar'\r\n    }}).$mount();//we need mounted to vue explicitly\r\n\r\n    t.is(vm.$el.textContent,'Foobar');\r\n});\r\n//since we are not runing in the browser, the test is thought node.js, it doesn't know what is resource document.body is. the Vue code el === document.body || el == document.documentElement is going wrong\r\n//and we need to mock the browser environment,  npm install browser-env --save-dev\r\n//\"./test/helper/setup-browser-env.js\" //set up in package.json to tell ava to automatically require a littel helper file for test\r\n\r\n\r\ntest('that it capitalizes the message', t =>{\r\n    let N = Vue.extend(Notification);\r\n    let vm = new N({propsData:{\r\n        message:'foobar'\r\n    }}).$mount();\r\n\r\n    t.is(vm.$el.textContent,'FOOBAR');\r\n});\r\n\r\ntest('that it computes the notification', t =>{\r\n    // let N = Vue.extend(Notification);\r\n    // let vm = new N({propsData:{\r\n    //     message:'foobar'\r\n    // }}).$mount();\r\n\r\n    t.is(vm.$el.textContent,'FOOBARFOOBAR');\r\n});"]}